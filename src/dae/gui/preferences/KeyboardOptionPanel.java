/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dae.gui.preferences;

import dae.GlobalObjects;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Koen Samyn
 */
public class KeyboardOptionPanel extends javax.swing.JPanel implements ChangeListener, PreferencePanel{

    private boolean changed = false;
    
    private boolean useCustomKeysOld;

    /**
     * Creates new form KeyboardOptionPanel
     */
    public KeyboardOptionPanel() {
        initComponents();
        defineKeys();
        leftKey.addChangeListener(this);
        rightKey.addChangeListener(this);
        upKey.addChangeListener(this);
        downKey.addChangeListener(this);
        forwardKey.addChangeListener(this);
        backKey.addChangeListener(this);
    }

    private void defineKeys() {
        GlobalObjects go = GlobalObjects.getInstance();
        boolean useCustomKeys = GlobalObjects.getInstance().getBooleanPreference("CustomKeys", false);
        if (useCustomKeys) {
            String strafeLeft = go.getStringPreference("FLYCAM_StrafeLeft");
            leftKey.setKey(new GameKeyDefinition(strafeLeft));

            String strafeRight = go.getStringPreference("FLYCAM_StrafeRight");
            rightKey.setKey(new GameKeyDefinition(strafeRight));

            String forward = go.getStringPreference("FLYCAM_Forward");
            forwardKey.setKey(new GameKeyDefinition(forward));

            String backward = go.getStringPreference("FLYCAM_Backward");
            backKey.setKey(new GameKeyDefinition(backward));

            String rise = go.getStringPreference("FLYCAM_Rise");
            upKey.setKey(new GameKeyDefinition(rise));

            String lower = go.getStringPreference("FLYCAM_Lower");
            downKey.setKey(new GameKeyDefinition(lower));
        } else {
            int leftKeyCode = go.getJavaCameraKeyCode("FLYCAM_StrafeLeft");
            leftKey.setKey(leftKeyCode, leftKeyCode);

            int rightKeyCode = go.getJavaCameraKeyCode("FLYCAM_StrafeRight");
            rightKey.setKey(rightKeyCode, rightKeyCode);

            int forwardKeyCode = go.getJavaCameraKeyCode("FLYCAM_Forward");
            forwardKey.setKey(forwardKeyCode, forwardKeyCode);

            int backwardKeyCode = go.getJavaCameraKeyCode("FLYCAM_Backward");
            backKey.setKey(backwardKeyCode, backwardKeyCode);

            int upKeyCode = go.getJavaCameraKeyCode("FLYCAM_Rise");
            upKey.setKey(upKeyCode, upKeyCode);

            int downKeyCode = go.getJavaCameraKeyCode("FLYCAM_Lower");
            downKey.setKey(downKeyCode, downKeyCode);
        }
    }
    
    /**
     * Make a backup of the old situation if necessary, to make
     * it easier to perform the actual changes.
     */
    public void createBackup(){
        useCustomKeysOld = GlobalObjects.getInstance().getBooleanPreference("CustomKeys", false);
    }

    /**
     * Commits the changes that were made in this user interface.
     */
    public void commitChanges() {
        if (changed) {
            GlobalObjects go = GlobalObjects.getInstance();
            boolean useCustomKeys = GlobalObjects.getInstance().getBooleanPreference("CustomKeys", false);
            if (useCustomKeys) {
                go.setStringPreference("FLYCAM_StrafeLeft", leftKey.getKey().toString());
                go.setStringPreference("FLYCAM_StrafeRight", rightKey.getKey().toString());
                go.setStringPreference("FLYCAM_Rise", upKey.getKey().toString());
                go.setStringPreference("FLYCAM_Lower", downKey.getKey().toString());
                go.setStringPreference("FLYCAM_Forward", forwardKey.getKey().toString());
                go.setStringPreference("FLYCAM_Backward", backKey.getKey().toString());
                go.updateCameraKeys();
            }else{
                // if the application was set to use custom keys, we neede to update
                // the key bindings for the camera.
                if ( useCustomKeysOld )
                {
                    go.updateCameraKeys();
                }
            }
        }
    }
    
     public void revertChanges() {
        if ( changed ){
            GlobalObjects.getInstance().setBooleanPreference("CustomKeys", useCustomKeysOld);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblFiller = new javax.swing.JLabel();
        lblCamera = new javax.swing.JLabel();
        leftKey = new dae.gui.components.GameKeySelectionField();
        rightKey = new dae.gui.components.GameKeySelectionField();
        forwardKey = new dae.gui.components.GameKeySelectionField();
        backKey = new dae.gui.components.GameKeySelectionField();
        upKey = new dae.gui.components.GameKeySelectionField();
        downKey = new dae.gui.components.GameKeySelectionField();
        btnResetDefaults = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 100;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(lblFiller, gridBagConstraints);

        lblCamera.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCamera.setText("Camera keys :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 2);
        add(lblCamera, gridBagConstraints);

        leftKey.setLabel("Left : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(leftKey, gridBagConstraints);

        rightKey.setLabel("Right :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(rightKey, gridBagConstraints);

        forwardKey.setLabel("Forward : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(forwardKey, gridBagConstraints);

        backKey.setLabel("Back : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(backKey, gridBagConstraints);

        upKey.setLabel("Up :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(upKey, gridBagConstraints);

        downKey.setLabel("Down : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        add(downKey, gridBagConstraints);

        btnResetDefaults.setText("Reset defaults");
        btnResetDefaults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetDefaultsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 10);
        add(btnResetDefaults, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetDefaultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetDefaultsActionPerformed
        changed = true;
        GlobalObjects.getInstance().setBooleanPreference("CustomKeys", false);
        defineKeys();
    }//GEN-LAST:event_btnResetDefaultsActionPerformed

    /**
     * Called when one of the game key definitions has changed.
     *
     * @param e the ChangeEvent object.
     */
    public void stateChanged(ChangeEvent e) {
        changed = true;
        GlobalObjects.getInstance().setBooleanPreference("CustomKeys", true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private dae.gui.components.GameKeySelectionField backKey;
    private javax.swing.JButton btnResetDefaults;
    private dae.gui.components.GameKeySelectionField downKey;
    private dae.gui.components.GameKeySelectionField forwardKey;
    private javax.swing.JLabel lblCamera;
    private javax.swing.JLabel lblFiller;
    private dae.gui.components.GameKeySelectionField leftKey;
    private dae.gui.components.GameKeySelectionField rightKey;
    private dae.gui.components.GameKeySelectionField upKey;
    // End of variables declaration//GEN-END:variables

   
}

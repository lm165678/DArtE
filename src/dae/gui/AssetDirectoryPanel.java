/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dae.gui;

import dae.gui.model.AssetTreeModel;
import dae.gui.renderers.AssetTreeCellRenderer;
import dae.prefabs.ui.classpath.DirectorySearcher;
import dae.prefabs.ui.classpath.FileNode;
import dae.project.Project;
import java.awt.Cursor;
import java.io.File;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;

/**
 *
 * @author samyn_000
 */
public class AssetDirectoryPanel extends javax.swing.JPanel implements DocumentListener {

    private DirectorySearcher searcher = new DirectorySearcher();
    private Project currentProject;
    private FileNode baseNode;
    private AssetTreeModel treeModel;
    private Pattern filePattern;
    private ExecutorService executor;

    /**
     * Creates new form AssetPanel
     */
    public AssetDirectoryPanel() {
        // match j3o files and klatch files
        setFilePattern(".*\\.*klatch");
        initComponents();
        assetTree.setCellRenderer(new AssetTreeCellRenderer());
        //assetTree.setTransferHandler(new TreeTransferHandler());
        executor = Executors.newSingleThreadExecutor();

        txtNewDirectory.getDocument().addDocumentListener(this);
    }

    public final void setFilePattern(String pattern) {
        filePattern = Pattern.compile(pattern);
        searcher.setMatcher(filePattern.matcher(""));
    }

    public String getFilePattern() {
        return filePattern.pattern();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        scrAssetPanel = new javax.swing.JScrollPane();
        assetTree = new javax.swing.JTree();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnSearch.putClientProperty("JComponent.sizeVariant", "mini");
        btnNewFolder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNewDirectory = new dae.gui.components.AlphaNumericTextField();

        jButton1.setText("jButton1");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Assets");
        assetTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        assetTree.setDragEnabled(true);
        assetTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                assetTreeMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                assetTreeMousePressed(evt);
            }
        });
        scrAssetPanel.setViewportView(assetTree);

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        lblSearch.setText("Search directory:");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/zoom.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnNewFolder.setIcon(UIManager.getDefaults().getIcon("FileChooser.newFolderIcon"));
        btnNewFolder.setEnabled(false);
        btnNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFolderActionPerformed(evt);
            }
        });

        jLabel1.setText("New directory:");

        txtSearch.putClientProperty("JComponent.sizeVariant", "small");
        txtSearch.putClientProperty("JComponent.sizeVariant", "small");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrAssetPanel)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewFolder))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewFolder)
                    .addComponent(jLabel1)
                    .addComponent(txtNewDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(scrAssetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSearch)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearch))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
        adaptFilter();
        if (currentProject != null) {
            this.buildAssetTree(currentProject);
        }

    }//GEN-LAST:event_txtSearchActionPerformed

    private void assetTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetTreeMousePressed
        // TODO add your handling code here:
//        if (evt.isPopupTrigger()) {
//            showAssetTreePopup(evt);
//        }
    }//GEN-LAST:event_assetTreeMousePressed

    private void assetTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assetTreeMouseReleased
        // TODO add your handling code here:
//        if (evt.isPopupTrigger()) {
//            showAssetTreePopup(evt);
//        }
    }//GEN-LAST:event_assetTreeMouseReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        adaptFilter();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnNewFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFolderActionPerformed
        if (currentProject == null) {
            return;
        }
        TreePath selection = this.assetTree.getSelectionPath();
        FileNode node = (FileNode) selection.getLastPathComponent();

        if (node.isFile()) {
            node = node.getParentNode();
        }
        FileNode last = new FileNode(txtNewDirectory.getText(), false);
        node.addChild(last);

        File newdir = new File(currentProject.getKlatchDirectory(), last.getFullName());
        Object[] path = new Object[node.getDepth()];
        newdir.mkdirs();

        // create the event
        FileNode pathNode = node;
        for (int i = path.length - 1; i >= 0; --i) {
            path[i] = pathNode;
            pathNode = pathNode.getParentNode();
        }
        int[] indices = {node.getIndexOf(last)};
        Object[] objects = {node};
        TreeModelEvent tme = new TreeModelEvent(this, path, indices, objects);
        treeModel.fireNodeAdded(tme);


    }//GEN-LAST:event_btnNewFolderActionPerformed

    private void adaptFilter() {
        setFilePattern(".*" + txtSearch.getText() + ".*\\.klatch");
        buildAssetTree(currentProject);
    }

    /*
     private void showAssetTreePopup(MouseEvent evt) {
     int x = evt.getX();
     int y = evt.getY();
     JTree tree = (JTree) evt.getSource();
     TreePath path = tree.getPathForLocation(x, y);
     if (path == null) {
     return;
     }
     tree.setSelectionPath(path);
     FileNode selected = (FileNode) path.getLastPathComponent();
     if (selected.isFile()) {
     this.assetPopupMenu.show(tree, evt.getX(), evt.getY());
     }
     }
     */
    public Object[] createTreePath(FileNode node) {
        // count the number of elements in the path
        int count = 1;
        FileNode countNode = node;
        while (countNode.getParentNode() != null) {
            countNode = countNode.getParentNode();
            ++count;
        }

        Object[] path = new Object[count];
        for (int i = path.length - 1; i >= 0; --i) {
            path[i] = node;
            node = node.getParentNode();
        }
        return path;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree assetTree;
    private javax.swing.JButton btnNewFolder;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JScrollPane scrAssetPanel;
    private dae.gui.components.AlphaNumericTextField txtNewDirectory;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public void buildAssetTree(final Project project) {
        if (project == null) {
            return;
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        executor.execute(new Runnable() {
            public void run() {
                Path path = project.getKlatchDirectory().toPath();
                searcher.setStartDirectory(path);
                baseNode = searcher.searchFiles();
                treeModel = new AssetTreeModel(baseNode);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        assetTree.setModel(treeModel);
                        assetTree.setSelectionRow(0);
                        setCursor(Cursor.getDefaultCursor());
                    }
                });
            }
        });
    }

    public void setCurrentProject(Project currentProject) {
        this.currentProject = currentProject;
    }

    public void addTreeSelectionListener(TreeSelectionListener listener) {
        assetTree.addTreeSelectionListener(listener);
    }

    public void resetFields() {
        txtNewDirectory.setText("");
    }

    public void insertUpdate(DocumentEvent e) {
        updateButton();
    }

    public void removeUpdate(DocumentEvent e) {
        updateButton();
    }

    public void changedUpdate(DocumentEvent e) {
        updateButton();
    }
    
    public void updateButton(){
        String newDirName = txtNewDirectory.getText();
        if (newDirName.length() == 0) {
            btnNewFolder.setEnabled(false);
            return;
        }
        TreePath selection = this.assetTree.getSelectionPath();
        FileNode node = (FileNode) selection.getLastPathComponent();
        if (node.isDirectory()) {
            btnNewFolder.setEnabled(!node.hasChild(newDirName));
        } else {
            FileNode parent = node.getParentNode();
            btnNewFolder.setEnabled(!parent.hasChild(newDirName));
        }
    }
}

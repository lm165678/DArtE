package dae.gui;

import dae.components.PrefabComponent;
import dae.prefabs.Prefab;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * This dialog allows the user to remove a component from a node.
 *
 * @author Koen Samyn
 */
public class RemoveComponentDialog extends javax.swing.JDialog {

    private Prefab current;

    /**
     * Creates new form RemoveComponentDialog
     */
    public RemoveComponentDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void setPrefab(Prefab current) {
        this.current = current;
        if (cboRemoveRecursively.isSelected()){
            queryComponentsRecursively();
        }else{
            queryComponents();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        nonCollapsibleHeader1 = new dae.gui.components.NonCollapsibleHeader();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblFiller = new javax.swing.JLabel();
        pnlControls = new javax.swing.JPanel();
        lblComponentToRemove = new javax.swing.JLabel();
        cboComponents = new javax.swing.JComboBox();
        cboRemoveRecursively = new javax.swing.JCheckBox();
        lblFiler = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        nonCollapsibleHeader1.setTitle("Remove Component");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 4, 2);
        getContentPane().add(nonCollapsibleHeader1, gridBagConstraints);

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
        getContentPane().add(btnOk, gridBagConstraints);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(btnCancel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(lblFiller, gridBagConstraints);

        pnlControls.setLayout(new java.awt.GridBagLayout());

        lblComponentToRemove.setText("Component to remove : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlControls.add(lblComponentToRemove, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlControls.add(cboComponents, gridBagConstraints);

        cboRemoveRecursively.setText("Remove recursively");
        cboRemoveRecursively.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRemoveRecursivelyItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        pnlControls.add(cboRemoveRecursively, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        pnlControls.add(lblFiler, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(pnlControls, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboRemoveRecursivelyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRemoveRecursivelyItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            queryComponentsRecursively();
        } else {
            queryComponents();
        }
    }//GEN-LAST:event_cboRemoveRecursivelyItemStateChanged

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        String selectedComponent = cboComponents.getSelectedItem().toString();
        current.removePrefabComponent(selectedComponent, cboRemoveRecursively.isSelected());
        setVisible(false);
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoveComponentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoveComponentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoveComponentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoveComponentDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RemoveComponentDialog dialog = new RemoveComponentDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox cboComponents;
    private javax.swing.JCheckBox cboRemoveRecursively;
    private javax.swing.JLabel lblComponentToRemove;
    private javax.swing.JLabel lblFiler;
    private javax.swing.JLabel lblFiller;
    private dae.gui.components.NonCollapsibleHeader nonCollapsibleHeader1;
    private javax.swing.JPanel pnlControls;
    // End of variables declaration//GEN-END:variables

    private void queryComponentsRecursively() {
        ArrayList<String> components = new ArrayList<String>();
        queryComponentsRecursively(components, current);
        cboComponents.setModel(new DefaultComboBoxModel(components.toArray()));
    }

    private void queryComponentsRecursively(ArrayList<String> componentIds, Prefab prefab) {
        for (PrefabComponent pc : prefab.getComponents()) {
            if (!(pc.getId().equals("TransformComponent"))) {
                if (!componentIds.contains(pc.getId())) {
                    componentIds.add(pc.getId());
                }
            }
        }
        for (int i = 0; i < prefab.getPrefabChildCount(); ++i) {
            Prefab child = (Prefab) prefab.getPrefabChildAt(i);
            queryComponentsRecursively(componentIds, child);
        }
    }

    private void queryComponents() {
        ArrayList<String> components = new ArrayList<String>();
        for (PrefabComponent pc : current.getComponents()) {
            if (!(pc.getId().equals("TransformComponent"))) {
                components.add(pc.getId());
            }
        }
        cboComponents.setModel(new DefaultComboBoxModel(components.toArray()));
    }
}

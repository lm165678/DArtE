/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dae.gui;

import com.google.common.eventbus.Subscribe;
import com.jme3.math.Vector3f;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import dae.GlobalObjects;
import dae.animation.rig.Rig;
import dae.animation.rig.io.RigWriter;
import dae.animation.skeleton.Body;
import dae.animation.skeleton.RevoluteJoint;
import dae.gui.events.ApplicationStoppedEvent;
import dae.io.ProjectLoader;
import dae.io.ProjectSaver;
import dae.prefabs.AxisEnum;
import dae.prefabs.gizmos.Axis;
import dae.prefabs.gizmos.RotateGizmoSpace;
import dae.prefabs.gizmos.TranslateGizmoSpace;
import dae.prefabs.gizmos.events.AutoGridEvent;
import dae.prefabs.gizmos.events.GizmoSpaceChangedEvent;
import dae.prefabs.gizmos.events.RotateGizmoSpaceChangedEvent;
import dae.prefabs.types.ObjectType;
import dae.prefabs.types.ObjectTypeCategory;
import dae.prefabs.ui.classpath.FileNode;
import dae.prefabs.ui.events.AssetEvent;
import dae.prefabs.ui.events.AssetEventType;
import dae.prefabs.ui.events.CreateObjectEvent;
import dae.prefabs.ui.events.GizmoEvent;
import dae.prefabs.ui.events.GizmoType;
import dae.prefabs.ui.events.ProjectEvent;
import dae.prefabs.ui.events.ProjectEventType;
import dae.prefabs.ui.events.ViewportReshapeEvent;
import dae.prefabs.ui.events.ZoomEvent;
import dae.prefabs.ui.events.ZoomEventType;
import dae.project.Project;
import java.awt.Dimension;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author samyn_000
 */
public class SandboxFrame extends javax.swing.JFrame implements DropTargetListener {

    private SandboxViewport viewport;
    private CreateProjectDialog createProjectDialog;
    private CreateKlatchDialog createObjectDialog;
    /**
     * The current project.
     */
    private Project currentProject;
    /**
     * This boolean is true when the viewport has been loaded.
     */
    private boolean viewportLoaded = false;

    /**
     * Creates new form SandboxFrame
     */
    public SandboxFrame() {
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        initComponents();
        cboTranslateSpace.setModel(new DefaultComboBoxModel(TranslateGizmoSpace.values()));
        cboRotateSpace.setModel(new DefaultComboBoxModel(RotateGizmoSpace.values()));

        cboTranslateSpace.setSelectedItem(TranslateGizmoSpace.LOCAL);
        cboRotateSpace.setSelectedItem(RotateGizmoSpace.LOCAL);
        SwingUtilities.updateComponentTreeUI(this);
        GlobalObjects.getInstance().registerListener(this);

        AppSettings settings = new AppSettings(true);
        settings.setWidth(640);
        settings.setHeight(480);
        settings.setVSync(true);

        //settings.set

        viewport = new SandboxViewport();
        viewport.setSettings(settings);

        viewport.createCanvas(); // create canvas!
        JmeCanvasContext ctx = (JmeCanvasContext) viewport.getContext();
        ctx.setSystemListener(viewport);
        Dimension dim = new Dimension(640, 480);
        ctx.getCanvas().setPreferredSize(dim);
        ctx.getCanvas().setMinimumSize(new Dimension(320, 240));
        DropTarget dropTarget = new DropTarget(ctx.getCanvas(), this);
        viewport.startCanvas();

        pnlViewPort.setLeftComponent(ctx.getCanvas());

        createProjectDialog = new CreateProjectDialog(this, true);
        createObjectDialog = new CreateKlatchDialog(this, true);
        createObjectDialog.setExtension("rig");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sceneChooser = new javax.swing.JFileChooser();
        gizmoButtonGroup = new javax.swing.ButtonGroup();
        pnlMainSplitPane = new javax.swing.JSplitPane();
        pnlProjectSplit = new javax.swing.JSplitPane();
        projectPanel1 = new dae.gui.ProjectPanel();
        assetPanel2 = new dae.gui.AssetPanel();
        pnlOutputSplit = new javax.swing.JSplitPane();
        pnlTabOutputs = new javax.swing.JTabbedPane();
        outputPanel1 = new dae.gui.OutputPanel();
        pnlToolbarViewport = new javax.swing.JPanel();
        pnlViewPort = new javax.swing.JSplitPane();
        propertiesPanel1 = new dae.prefabs.ui.PropertiesPanel();
        pnlToolbar = new javax.swing.JPanel();
        gizmoToolbar = new javax.swing.JToolBar();
        btnLink = new javax.swing.JToggleButton();
        btnMove = new javax.swing.JToggleButton();
        cboTranslateSpace = new javax.swing.JComboBox();
        btnRotate = new javax.swing.JToggleButton();
        cboRotateSpace = new javax.swing.JComboBox();
        zoomToolbar = new javax.swing.JToolBar();
        btnZoomExtents = new javax.swing.JButton();
        snapToolbar = new javax.swing.JToolBar();
        toggleSnap = new javax.swing.JToggleButton();
        toggleAutogrid = new javax.swing.JToggleButton();
        mnuSandboxMenu = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuNewProject = new javax.swing.JMenuItem();
        mnuOpenScene = new javax.swing.JMenuItem();
        openSeparator = new javax.swing.JPopupMenu.Separator();
        mnuSaveProject = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuPreferences = new javax.swing.JMenuItem();
        mnuAdd = new javax.swing.JMenu();
        mnuCreateRig = new javax.swing.JMenuItem();
        mnuAddRevoluteJoint = new javax.swing.JMenuItem();
        mnuAddTarget = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mnuAddSkeleton = new javax.swing.JMenuItem();
        mnuSkeleton2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuAddHandle = new javax.swing.JMenuItem();
        mnuAdd2HandleAxis = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        munAddFootcurve = new javax.swing.JMenuItem();
        mnuHandCurve = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuAddCharacterPath = new javax.swing.JMenuItem();
        mnuAddWaypoint = new javax.swing.JMenuItem();
        mnuLights = new javax.swing.JMenu();
        mnuAddAmbientLight = new javax.swing.JMenuItem();
        mnuAddSpotLight = new javax.swing.JMenuItem();
        mnuAddDirectionalLight = new javax.swing.JMenuItem();
        mnuSpotLight = new javax.swing.JMenuItem();
        mnuPhysics = new javax.swing.JMenu();
        mnuAddCrate = new javax.swing.JMenuItem();
        mnuAddSphere = new javax.swing.JMenuItem();
        mnuAddCylinder = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnuAddHingeJoint = new javax.swing.JMenuItem();
        mnuMetaData = new javax.swing.JMenu();
        mnuAddPivot = new javax.swing.JMenuItem();

        sceneChooser.setAcceptAllFileFilterUsed(false);
        sceneChooser.setFileFilter(new FileNameExtensionFilter("Sandbox files","zbk"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DAE Sandbox v1.0");
        setPreferredSize(new java.awt.Dimension(1280, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlProjectSplit.setDividerLocation(200);
        pnlProjectSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        pnlProjectSplit.setResizeWeight(0.5);
        pnlProjectSplit.setLeftComponent(projectPanel1);
        pnlProjectSplit.setRightComponent(assetPanel2);

        pnlMainSplitPane.setLeftComponent(pnlProjectSplit);

        pnlOutputSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        pnlOutputSplit.setResizeWeight(0.5);

        pnlTabOutputs.addTab("Output", outputPanel1);

        pnlOutputSplit.setRightComponent(pnlTabOutputs);

        pnlToolbarViewport.setLayout(new java.awt.BorderLayout());

        pnlViewPort.setResizeWeight(0.5);

        propertiesPanel1.setMinimumSize(new java.awt.Dimension(250, 200));
        propertiesPanel1.setPreferredSize(new java.awt.Dimension(250, 200));
        pnlViewPort.setRightComponent(propertiesPanel1);

        pnlToolbarViewport.add(pnlViewPort, java.awt.BorderLayout.CENTER);

        pnlToolbar.setMinimumSize(new java.awt.Dimension(70, 40));
        pnlToolbar.setPreferredSize(new java.awt.Dimension(70, 50));
        pnlToolbar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        gizmoToolbar.setRollover(true);

        gizmoButtonGroup.add(btnLink);
        btnLink.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/link.png"))); // NOI18N
        btnLink.setFocusable(false);
        btnLink.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLink.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLink.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnLinkItemStateChanged(evt);
            }
        });
        gizmoToolbar.add(btnLink);

        gizmoButtonGroup.add(btnMove);
        btnMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/transform_move.png"))); // NOI18N
        btnMove.setSelected(true);
        btnMove.setFocusable(false);
        btnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMove.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnMoveItemStateChanged(evt);
            }
        });
        gizmoToolbar.add(btnMove);

        cboTranslateSpace.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTranslateSpaceItemStateChanged(evt);
            }
        });
        gizmoToolbar.add(cboTranslateSpace);

        gizmoButtonGroup.add(btnRotate);
        btnRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/transform_rotate.png"))); // NOI18N
        btnRotate.setFocusable(false);
        btnRotate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRotate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnRotateItemStateChanged(evt);
            }
        });
        gizmoToolbar.add(btnRotate);

        cboRotateSpace.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboRotateSpaceItemStateChanged(evt);
            }
        });
        gizmoToolbar.add(cboRotateSpace);

        pnlToolbar.add(gizmoToolbar);

        zoomToolbar.setRollover(true);

        btnZoomExtents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/zoom_extend.png"))); // NOI18N
        btnZoomExtents.setFocusable(false);
        btnZoomExtents.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomExtents.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomExtents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomExtentsActionPerformed(evt);
            }
        });
        zoomToolbar.add(btnZoomExtents);

        pnlToolbar.add(zoomToolbar);

        snapToolbar.setRollover(true);

        toggleSnap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/enablesnaptool.png"))); // NOI18N
        toggleSnap.setFocusable(false);
        toggleSnap.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleSnap.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        snapToolbar.add(toggleSnap);

        toggleAutogrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/autogrid.png"))); // NOI18N
        toggleAutogrid.setFocusable(false);
        toggleAutogrid.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        toggleAutogrid.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toggleAutogrid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                toggleAutogridItemStateChanged(evt);
            }
        });
        snapToolbar.add(toggleAutogrid);

        pnlToolbar.add(snapToolbar);

        pnlToolbarViewport.add(pnlToolbar, java.awt.BorderLayout.NORTH);

        pnlOutputSplit.setTopComponent(pnlToolbarViewport);

        pnlMainSplitPane.setRightComponent(pnlOutputSplit);

        mnuFile.setText("File");

        mnuNewProject.setText("New Project ...");
        mnuNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewProjectActionPerformed(evt);
            }
        });
        mnuFile.add(mnuNewProject);

        mnuOpenScene.setText("Open Project ...");
        mnuOpenScene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenSceneActionPerformed(evt);
            }
        });
        mnuFile.add(mnuOpenScene);
        mnuFile.add(openSeparator);

        mnuSaveProject.setText("Save Project");
        mnuSaveProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveProjectActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveProject);

        mnuSandboxMenu.add(mnuFile);

        mnuEdit.setText("Edit");
        mnuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditActionPerformed(evt);
            }
        });

        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuUndo);

        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuRedo);

        mnuPreferences.setText("Preferences ...");
        mnuPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreferencesActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuPreferences);

        mnuSandboxMenu.add(mnuEdit);

        mnuAdd.setText("Animation");

        mnuCreateRig.setText("Create Rig ...");
        mnuCreateRig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateRigActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuCreateRig);

        mnuAddRevoluteJoint.setText("Add Revolute Joint");
        mnuAddRevoluteJoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddRevoluteJointActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddRevoluteJoint);

        mnuAddTarget.setText("Add Target");
        mnuAddTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddTargetActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddTarget);
        mnuAdd.add(jSeparator4);

        mnuAddSkeleton.setText("Add Skeleton 1");
        mnuAddSkeleton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddSkeletonActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddSkeleton);

        mnuSkeleton2.setText("Add Skeleton 2");
        mnuSkeleton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSkeleton2ActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuSkeleton2);
        mnuAdd.add(jSeparator1);

        mnuAddHandle.setText("Add Handle");
        mnuAddHandle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddHandleActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddHandle);

        mnuAdd2HandleAxis.setText("Add Handle2Axis");
        mnuAdd2HandleAxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAdd2HandleAxisActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAdd2HandleAxis);

        jMenuItem1.setText("Add Handshake");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuAdd.add(jMenuItem1);

        munAddFootcurve.setText("Add Footcurve");
        munAddFootcurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                munAddFootcurveActionPerformed(evt);
            }
        });
        mnuAdd.add(munAddFootcurve);

        mnuHandCurve.setText("Add Handcurve");
        mnuHandCurve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHandCurveActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuHandCurve);
        mnuAdd.add(jSeparator2);

        mnuAddCharacterPath.setText("Add Character Path");
        mnuAddCharacterPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddCharacterPathActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddCharacterPath);

        mnuAddWaypoint.setText("Add Waypoint");
        mnuAddWaypoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddWaypointActionPerformed(evt);
            }
        });
        mnuAdd.add(mnuAddWaypoint);

        mnuSandboxMenu.add(mnuAdd);

        mnuLights.setText("Lights");

        mnuAddAmbientLight.setText("Add Ambient Light");
        mnuAddAmbientLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddAmbientLightActionPerformed(evt);
            }
        });
        mnuLights.add(mnuAddAmbientLight);

        mnuAddSpotLight.setText("Add Pointlight");
        mnuAddSpotLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddSpotLightActionPerformed(evt);
            }
        });
        mnuLights.add(mnuAddSpotLight);

        mnuAddDirectionalLight.setText("Add Directional Light");
        mnuAddDirectionalLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddDirectionalLightActionPerformed(evt);
            }
        });
        mnuLights.add(mnuAddDirectionalLight);

        mnuSpotLight.setText("Add Spotlight");
        mnuSpotLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSpotLightActionPerformed(evt);
            }
        });
        mnuLights.add(mnuSpotLight);

        mnuSandboxMenu.add(mnuLights);

        mnuPhysics.setText("Physics");
        mnuPhysics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPhysicsActionPerformed(evt);
            }
        });

        mnuAddCrate.setText("Add Crate");
        mnuAddCrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddCrateActionPerformed(evt);
            }
        });
        mnuPhysics.add(mnuAddCrate);

        mnuAddSphere.setText("Add Sphere");
        mnuAddSphere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddSphereActionPerformed(evt);
            }
        });
        mnuPhysics.add(mnuAddSphere);

        mnuAddCylinder.setText("Add Cylinder");
        mnuAddCylinder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddCylinderActionPerformed(evt);
            }
        });
        mnuPhysics.add(mnuAddCylinder);
        mnuPhysics.add(jSeparator3);

        mnuAddHingeJoint.setText("Add Hinge Joint");
        mnuAddHingeJoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddHingeJointActionPerformed(evt);
            }
        });
        mnuPhysics.add(mnuAddHingeJoint);

        mnuSandboxMenu.add(mnuPhysics);

        mnuMetaData.setText("Metadata");

        mnuAddPivot.setText("Add Pivot");
        mnuAddPivot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddPivotActionPerformed(evt);
            }
        });
        mnuMetaData.add(mnuAddPivot);

        mnuSandboxMenu.add(mnuMetaData);

        setJMenuBar(mnuSandboxMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 884, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuOpenSceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenSceneActionPerformed
        // TODO add your handling code here:
        String recentFiles = Preferences.userRoot().get("RecentFiles", "");
        int colonIndex = recentFiles.lastIndexOf('\0');
        String lastFile = recentFiles.substring(colonIndex + 1);
        File file = new File(lastFile);
        if (file.exists()) {
            sceneChooser.setCurrentDirectory(file.getParentFile());
        }
        int choice = sceneChooser.showOpenDialog(this);
        if (choice == JFileChooser.APPROVE_OPTION) {
            File projectFile = sceneChooser.getSelectedFile();
            this.loadProject(projectFile);

            GlobalObjects.getInstance().addRecentFile(projectFile);
        }
    }//GEN-LAST:event_mnuOpenSceneActionPerformed

    private void mnuNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewProjectActionPerformed
        // TODO add your handling code here:
        createProjectDialog.setLocationRelativeTo(this);
        createProjectDialog.setVisible(true);

        createProjectDialog.clear();
        if (createProjectDialog.getReturnStatus() == CreateProjectDialog.RET_OK) {
            try {
                Project newProject = createProjectDialog.getResult();
                File projectFile = new File(newProject.getProjectLocation(), newProject.getProjectName() + ".zbk");
                ProjectSaver.write(newProject, projectFile);
                setCurrentProject(newProject);

                GlobalObjects.getInstance().addRecentFile(projectFile);
            } catch (IOException ex) {
                Logger.getLogger(SandboxFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_mnuNewProjectActionPerformed

    private void mnuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditActionPerformed
    }//GEN-LAST:event_mnuEditActionPerformed

    private void mnuPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreferencesActionPerformed
        PreferencesDialog dialog = new PreferencesDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_mnuPreferencesActionPerformed

    private void mnuAddCrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddCrateActionPerformed

        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Standard", "Crate");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddCrateActionPerformed

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        // TODO add your handling code here:
        GlobalObjects.getInstance().undo();
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
        // TODO add your handling code here:
        GlobalObjects.getInstance().redo();
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void mnuAddSkeletonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddSkeletonActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Skeleton");
        ot.setExtraInfo("Skeleton/Cathy/body.skel");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), "Skeleton/Cathy/body.skel", ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddSkeletonActionPerformed

    private void mnuSaveProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveProjectActionPerformed
        // TODO add your handling code here:

        if (currentProject != null) {
            if (currentProject.hasFileLocation()) {
                try {
                    ProjectSaver.write(currentProject, currentProject.getProjectLocation());
                } catch (IOException ex) {
                    Logger.getLogger(SandboxFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                int result = sceneChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selected = sceneChooser.getSelectedFile();
                    currentProject.setProjectLocation(selected);
                    File klatchDirectory = currentProject.getKlatchDirectory();
                    klatchDirectory.mkdirs();
                    currentProject.addAssetFolder(currentProject.getKlatchDirectory());
                    ProjectEvent pe = new ProjectEvent(currentProject, ProjectEventType.ASSETFOLDERCHANGED, this);
                    GlobalObjects.getInstance().postEvent(pe);
                    try {
                        ProjectSaver.write(currentProject, selected);
                        GlobalObjects.getInstance().addRecentFile(selected);
                    } catch (IOException ex) {
                        Logger.getLogger(SandboxFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_mnuSaveProjectActionPerformed

    private void mnuAddHandleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddHandleActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Handle");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddHandleActionPerformed

    private void mnuSkeleton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSkeleton2ActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Skeleton");
        ot.setExtraInfo("Skeleton/Inge/body.skel");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), "Skeleton/Inge/body.skel", ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuSkeleton2ActionPerformed

    private void mnuAdd2HandleAxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAdd2HandleAxisActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "TwoAxisHandle");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAdd2HandleAxisActionPerformed

    private void mnuAddCharacterPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddCharacterPathActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "CharacterPath");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddCharacterPathActionPerformed

    private void mnuAddWaypointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddWaypointActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Waypoint");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddWaypointActionPerformed

    private void btnLinkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnLinkItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            GlobalObjects.getInstance().postEvent(new GizmoEvent(this, GizmoType.LINK));
        }

    }//GEN-LAST:event_btnLinkItemStateChanged

    private void btnMoveItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnMoveItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            GlobalObjects.getInstance().postEvent(new GizmoEvent(this, GizmoType.TRANSLATE));
        }
    }//GEN-LAST:event_btnMoveItemStateChanged

    private void btnRotateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnRotateItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            GlobalObjects.getInstance().postEvent(new GizmoEvent(this, GizmoType.ROTATE));
        }
    }//GEN-LAST:event_btnRotateItemStateChanged

    private void munAddFootcurveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_munAddFootcurveActionPerformed
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Footcurve");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_munAddFootcurveActionPerformed

    private void mnuHandCurveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHandCurveActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Handcurve");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuHandCurveActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "Handshake");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void mnuSpotLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSpotLightActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Light", "SpotLight");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuSpotLightActionPerformed

    private void mnuPhysicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPhysicsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mnuPhysicsActionPerformed

    private void mnuAddSphereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddSphereActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Standard", "Sphere");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddSphereActionPerformed

    private void mnuAddCylinderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddCylinderActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Standard", "Cylinder");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddCylinderActionPerformed

    private void mnuAddHingeJointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddHingeJointActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Standard", "HingeJoint");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddHingeJointActionPerformed

    private void mnuAddPivotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddPivotActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Metadata", "Pivot");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddPivotActionPerformed

    private void btnZoomExtentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomExtentsActionPerformed
        // TODO add your handling code here:
        ZoomEvent ze = new ZoomEvent(ZoomEventType.EXTENTS_SELECTED);
        GlobalObjects.getInstance().postEvent(ze);
    }//GEN-LAST:event_btnZoomExtentsActionPerformed

    private void mnuAddSpotLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddSpotLightActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Light", "PointLight");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddSpotLightActionPerformed

    private void mnuAddDirectionalLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddDirectionalLightActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Light", "DirectionalLight");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddDirectionalLightActionPerformed

    private void mnuAddAmbientLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddAmbientLightActionPerformed
        // TODO add your handling code here:
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Light", "AmbientLight");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddAmbientLightActionPerformed

    private void cboTranslateSpaceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTranslateSpaceItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            TranslateGizmoSpace tgc = (TranslateGizmoSpace) evt.getItem();
            GlobalObjects.getInstance().postEvent(new GizmoSpaceChangedEvent(tgc));
        }
    }//GEN-LAST:event_cboTranslateSpaceItemStateChanged

    private void cboRotateSpaceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboRotateSpaceItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            RotateGizmoSpace tgc = (RotateGizmoSpace) evt.getItem();
            GlobalObjects.getInstance().postEvent(new RotateGizmoSpaceChangedEvent(tgc));
        }
    }//GEN-LAST:event_cboRotateSpaceItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        GlobalObjects.getInstance().postEvent(new ApplicationStoppedEvent());
    }//GEN-LAST:event_formWindowClosing

    private void mnuCreateRigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateRigActionPerformed
        // TODO add your handling code here:
        createObjectDialog.setTitle("Create Rig");
        createObjectDialog.setCurrentProject(this.currentProject);
        createObjectDialog.setVisible(true);
        if (createObjectDialog.getReturnStatus() == CreateKlatchDialog.RET_OK) {
            String rigLocation = createObjectDialog.getAssemblyName();
            // Create a default body.
            Rig rig = new Rig();
            File klatchDir = currentProject.getKlatchDirectory();
            File rigFile = new File(klatchDir, rigLocation);
            RigWriter.writeRig(rigFile, rig);

            AssetEvent ae = new AssetEvent(AssetEventType.EDIT, FileNode.createFromPath(rigLocation));
            GlobalObjects.getInstance().postEvent(ae);

        }
    }//GEN-LAST:event_mnuCreateRigActionPerformed

    private void mnuAddRevoluteJointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddRevoluteJointActionPerformed
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "RevoluteJoint");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }

    }//GEN-LAST:event_mnuAddRevoluteJointActionPerformed

    private void mnuAddTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddTargetActionPerformed
        ObjectTypeCategory otc = viewport.getObjectsToCreate();
        ObjectType ot = otc.getObjectType("Animation", "AttachmentPoint");
        if (ot != null) {
            CreateObjectEvent coe = new CreateObjectEvent(ot.getObjectToCreate(), null, ot);
            GlobalObjects.getInstance().postEvent(coe);
        }
    }//GEN-LAST:event_mnuAddTargetActionPerformed

    private void toggleAutogridItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_toggleAutogridItemStateChanged
        AutoGridEvent age = new AutoGridEvent(evt.getStateChange() == ItemEvent.SELECTED, AxisEnum.Y);
        GlobalObjects.getInstance().postEvent(age);
        
    }//GEN-LAST:event_toggleAutogridItemStateChanged
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SandboxFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SandboxFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SandboxFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SandboxFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SandboxFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private dae.gui.AssetPanel assetPanel2;
    private javax.swing.JToggleButton btnLink;
    private javax.swing.JToggleButton btnMove;
    private javax.swing.JToggleButton btnRotate;
    private javax.swing.JButton btnZoomExtents;
    private javax.swing.JComboBox cboRotateSpace;
    private javax.swing.JComboBox cboTranslateSpace;
    private javax.swing.ButtonGroup gizmoButtonGroup;
    private javax.swing.JToolBar gizmoToolbar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenu mnuAdd;
    private javax.swing.JMenuItem mnuAdd2HandleAxis;
    private javax.swing.JMenuItem mnuAddAmbientLight;
    private javax.swing.JMenuItem mnuAddCharacterPath;
    private javax.swing.JMenuItem mnuAddCrate;
    private javax.swing.JMenuItem mnuAddCylinder;
    private javax.swing.JMenuItem mnuAddDirectionalLight;
    private javax.swing.JMenuItem mnuAddHandle;
    private javax.swing.JMenuItem mnuAddHingeJoint;
    private javax.swing.JMenuItem mnuAddPivot;
    private javax.swing.JMenuItem mnuAddRevoluteJoint;
    private javax.swing.JMenuItem mnuAddSkeleton;
    private javax.swing.JMenuItem mnuAddSphere;
    private javax.swing.JMenuItem mnuAddSpotLight;
    private javax.swing.JMenuItem mnuAddTarget;
    private javax.swing.JMenuItem mnuAddWaypoint;
    private javax.swing.JMenuItem mnuCreateRig;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuHandCurve;
    private javax.swing.JMenu mnuLights;
    private javax.swing.JMenu mnuMetaData;
    private javax.swing.JMenuItem mnuNewProject;
    private javax.swing.JMenuItem mnuOpenScene;
    private javax.swing.JMenu mnuPhysics;
    private javax.swing.JMenuItem mnuPreferences;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuBar mnuSandboxMenu;
    private javax.swing.JMenuItem mnuSaveProject;
    private javax.swing.JMenuItem mnuSkeleton2;
    private javax.swing.JMenuItem mnuSpotLight;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JMenuItem munAddFootcurve;
    private javax.swing.JPopupMenu.Separator openSeparator;
    private dae.gui.OutputPanel outputPanel1;
    private javax.swing.JSplitPane pnlMainSplitPane;
    private javax.swing.JSplitPane pnlOutputSplit;
    private javax.swing.JSplitPane pnlProjectSplit;
    private javax.swing.JTabbedPane pnlTabOutputs;
    private javax.swing.JPanel pnlToolbar;
    private javax.swing.JPanel pnlToolbarViewport;
    private javax.swing.JSplitPane pnlViewPort;
    private dae.gui.ProjectPanel projectPanel1;
    private dae.prefabs.ui.PropertiesPanel propertiesPanel1;
    private javax.swing.JFileChooser sceneChooser;
    private javax.swing.JToolBar snapToolbar;
    private javax.swing.JToggleButton toggleAutogrid;
    private javax.swing.JToggleButton toggleSnap;
    private javax.swing.JToolBar zoomToolbar;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the project as the current project. Following actions will be
     * performed: 1. The name of the window is changed to the name of the
     * project. 2. If only one level is present, that level will be opened. If
     * more the one level is present in the project, the last opened level will
     * be opened, if there is no metadata about the last opened level, the first
     * level in the list will be opened.
     *
     * @param newProject the current project to set.
     */
    private void setCurrentProject(Project newProject) {
        currentProject = newProject;
        this.setTitle("DAE Sandbox - " + newProject.getProjectName());
        GlobalObjects.getInstance().postEvent(new ProjectEvent(newProject, this));
    }

    private void loadProject(File file) {
        ProjectLoader pl = new ProjectLoader();
        Project p = pl.load(file, this.viewport.getAssetManager());
        setCurrentProject(p);
    }

    public void dragEnter(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void dragOver(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void dropActionChanged(DropTargetDragEvent dtde) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void dragExit(DropTargetEvent dte) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void drop(DropTargetDropEvent dtde) {
        // something was dropped on the application
        //System.out.println("dtde:" + dtde.getDropAction());
        try {
            String asset = dtde.getTransferable().getTransferData(DataFlavor.stringFlavor).toString();
            int dotIndex = asset.lastIndexOf('.');
            if (dotIndex > 0) {
                String extension = asset.substring(dotIndex + 1).toLowerCase();
                if (extension.equals("j3o")) {
                    ObjectType ot = GlobalObjects.getInstance().getObjectsTypeCategory().getObjectType("Standard", "Mesh");
                    ot.setExtraInfo(asset);
                    CreateObjectEvent event = new CreateObjectEvent("dae.prefabs.standard.MeshObject", asset, ot);
                    viewport.onObjectCreation(event);
                } else if (extension.equals("klatch")) {
                    ObjectType ot = GlobalObjects.getInstance().getObjectsTypeCategory().getObjectType("Standard", "Klatch");
                    ot.setExtraInfo(asset);
                    CreateObjectEvent event = new CreateObjectEvent("dae.prefabs.Klatch", asset, ot);
                    viewport.onObjectCreation(event);
                } else if (extension.equals("rig")) {
                    ObjectType ot = GlobalObjects.getInstance().getObjectsTypeCategory().getObjectType("Animation", "Rig");
                    ot.setExtraInfo(asset);
                    CreateObjectEvent event = new CreateObjectEvent("dae.animation.rig.Rig", asset, ot);
                    viewport.onObjectCreation(event);
                }

            }
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(SandboxFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SandboxFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Subscribe
    public void viewPortSizeChange(ViewportReshapeEvent event) {
        SwingUtilities.invokeLater(
                new Runnable() {
            public void run() {
                if (!viewportLoaded) {
                    ArrayList<File> projectFiles = GlobalObjects.getInstance().getRecentFiles();
                    if (projectFiles.size() > 0) {
                        // load the last projectFile.
                        loadProject(projectFiles.get(0));
                    } else {
                        Project p = new Project();
                        setCurrentProject(p);
                    }
                    viewportLoaded = true;
                }
            }
        });
    }

    @Subscribe
    public void gizmoChanged(GizmoEvent event) {
        if (event.getSource() != this) {
            GizmoType type = event.getType();
            switch (type) {
                case TRANSLATE:
                    if (!btnMove.isSelected()) {
                        this.btnMove.setSelected(true);
                    }
                    break;
                case ROTATE:
                    if (!btnRotate.isSelected()) {
                        this.btnMove.setSelected(true);
                    }
                    this.btnRotate.setSelected(true);
                    break;
                case LINK:
                    if (!btnLink.isSelected()) {
                        this.btnMove.setSelected(true);
                    }
                    this.btnLink.setSelected(true);
                    break;
                case PICK:
                default:
                    this.gizmoButtonGroup.clearSelection();
            }
        }
    }
}
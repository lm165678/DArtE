package dae.gui.components;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;

/**
 *
 * @author Koen Samyn
 */
public class ImagePreview extends javax.swing.JPanel {
    private Image image;
    
    private Color background;
    /** Creates new form ImagePreview */
    public ImagePreview() {
        initComponents();
        setOpaque(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setImage(Image image){
        this.image = image;
    }
    

    @Override
    public void paintComponent(Graphics g)
    {
        if ( image != null )
        {
            //((Graphics2D)g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC));
            // preserve aspect ratio, but don't go
            // over the reserved width and height for the component.
            int width = getWidth();
            int height = getHeight();
            
            g.setColor(getBackground());
            g.clearRect(0,0,width,height);
            
            int iw = image.getWidth(this);
            int ih = image.getHeight(this);
            
            if ( iw > width && ih < height){
                g.drawImage(image, 0, (height-ih)/2, width, (ih * width) / iw, this);
            }else if ( iw < width && ih > height){
                g.drawImage(image, (width-iw)/2, 0, (iw * height)/ ih, ih,this);
            }else{
                float wfactor = iw *1.0f / width;
                float hfactor = ih *1.0f / height;
                if ( wfactor > hfactor){
                    int scaledHeight = (int)(ih / wfactor);
                    g.drawImage(image, 0 ,(height-scaledHeight)/ 2, width, scaledHeight, this);
                }else{
                    int scaledWidth = (int)(iw / hfactor);
                    g.drawImage(image, (width-scaledWidth)/2, 0, scaledWidth, height,this);
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

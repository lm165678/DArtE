package dae.gui.components;

import dae.prefabs.ui.classpath.FileNode;
import dae.project.Project;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Koen Samyn
 */
public class FileInformationPanel extends javax.swing.JPanel implements ActionListener {

    private FileNode currentFileNode;
    private long selectionTime = 0;
    private Timer selectionTimer;
    private long SELECTIONDELAY = 100;
    private Project project;

    /**
     * Creates new form FileInformationPanel
     */
    public FileInformationPanel() {
        initComponents();
        selectionTimer = new Timer(100, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblExtension = new javax.swing.JLabel();
        txtExtension = new javax.swing.JTextField();
        lblFileSize = new javax.swing.JLabel();
        txtFileSize = new javax.swing.JTextField();
        lblFileSize1 = new javax.swing.JLabel();
        txtModificationTime = new javax.swing.JTextField();
        pnlSpecificInfo = new javax.swing.JPanel();
        soundInfo1 = new dae.gui.components.SoundInfo();

        setLayout(new java.awt.GridBagLayout());

        lblName.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblName, gridBagConstraints);

        txtName.setEditable(false);
        txtName.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 1, 10);
        add(txtName, gridBagConstraints);

        lblExtension.setText("Extension:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblExtension, gridBagConstraints);

        txtExtension.setEditable(false);
        txtExtension.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 1, 10);
        add(txtExtension, gridBagConstraints);

        lblFileSize.setText("File size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblFileSize, gridBagConstraints);

        txtFileSize.setEditable(false);
        txtFileSize.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 1, 10);
        add(txtFileSize, gridBagConstraints);

        lblFileSize1.setText("Modification time:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(lblFileSize1, gridBagConstraints);

        txtModificationTime.setEditable(false);
        txtModificationTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 1, 10);
        add(txtModificationTime, gridBagConstraints);

        pnlSpecificInfo.setLayout(new java.awt.CardLayout());
        pnlSpecificInfo.add(soundInfo1, "sound");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 2, 2);
        add(pnlSpecificInfo, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblExtension;
    private javax.swing.JLabel lblFileSize;
    private javax.swing.JLabel lblFileSize1;
    private javax.swing.JLabel lblName;
    private javax.swing.JPanel pnlSpecificInfo;
    private dae.gui.components.SoundInfo soundInfo1;
    private javax.swing.JTextField txtExtension;
    private javax.swing.JTextField txtFileSize;
    private javax.swing.JTextField txtModificationTime;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the filenode to show the extra information for.
     *
     * @param fn the filenode to show.
     */
    public void setFileNode(FileNode fn) {
        currentFileNode = fn;
        selectionTime = System.currentTimeMillis();
        txtName.setText(fn.getName());
        txtExtension.setText(fn.getExtension());

        if (fn.isDirectory()) {
            txtFileSize.setText("");
            txtModificationTime.setText("");
        }

        if (project != null && fn.isFile()) {
            URL resourceURL = project.getAssetLoader().getResource(fn.getFullName());
            InputStream is = null;
            try {
                is = resourceURL.openStream();
                int length = is.available();
                txtFileSize.setText(getFileLengthAsString(length, false));
            } catch (IOException ex) {
                Logger.getLogger("DArtE").log(Level.SEVERE, "Could not open {0}.", fn.getFullName());
            } finally {
                try {
                    if (is != null) {
                        is.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger("DArtE").log(Level.SEVERE, "Could not close stream {0}", fn.getFullName());
                }
            }
        }
    }

    /**
     * Sets the file length of the current file.
     *
     * @param length the length of the file.
     */
    private String getFileLengthAsString(int bytes, boolean si) {

        int unit = si ? 1000 : 1024;
        if (bytes < unit) {
            return bytes + " B";
        }
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = (si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");
        return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }

    public void actionPerformed(ActionEvent e) {
        if (currentFileNode == null || currentFileNode.isDirectory()) {
            return;
        }

        long currentTime = System.currentTimeMillis();
        if (selectionTime != 0 && (currentTime - selectionTime) > SELECTIONDELAY) {
            loadCompleteInformation();
        }
    }

    private void loadCompleteInformation() {
        String extension = currentFileNode.getExtension();
        selectionTime = 0;
        // todo - type registry
        if (extension.equals("ogg") || extension.equals("wav")) {
            ((CardLayout) pnlSpecificInfo.getLayout()).show(pnlSpecificInfo, "sound");
            soundInfo1.setFileNode(currentFileNode);
        }
    }

    /**
     * Set the current project, this helps to load the correct file from the
     * asset path.
     *
     * @param currentProject the current project to use.
     */
    public void setProject(Project currentProject) {
        this.project = currentProject;
        this.soundInfo1.setProject(currentProject);
    }

    public void startTimer() {
        this.selectionTimer.start();
        soundInfo1.activatePlayer();
    }

    public void stopTimer() {
        this.selectionTimer.stop();
        soundInfo1.deactivatePlayer();
    }
}

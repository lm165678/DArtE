/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dae.gui.fuzzy;

import dae.gui.fuzzy.model.FuzzyRuleBlockListModel;
import dae.gui.fuzzy.rule.AutoSuggestor;
import dae.gui.fuzzy.rule.SuggestorDocument;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeListener;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import mlproject.fuzzy.FuzzyRule;
import mlproject.fuzzy.FuzzyRuleBlock;
import mlproject.fuzzy.FuzzySystem;

/**
 *
 * @author Koen Samyn
 */
public class RuleBlockPanel extends javax.swing.JPanel implements DocumentListener {

    private FuzzyRuleBlockListModel ruleBlockModel;
    private FuzzySystem system;
    private FuzzyRuleBlock currentRuleBlock;
    
    private AutoSuggestor autoSuggestor;

    /**
     * Creates new form RuleBlockPanel
     */
    public RuleBlockPanel() {
        initComponents();
      
       
    }
    
    @Override
    public void addNotify(){
        autoSuggestor = new AutoSuggestor(txtRuleList,(JDialog)getTopLevelAncestor(),
                system,
                Color.YELLOW,
                Color.BLACK,
                Color.ORANGE,
                0.5f);
        txtRuleList.setDocument(new SuggestorDocument(autoSuggestor));
        txtRuleList.getDocument().addDocumentListener(this);
        autoSuggestor.registerDocumentListener();
        
        ActionMap am = txtRuleList.getActionMap();
        Action upAction = am.get("caret-up");
        CaretUpAction cua = new CaretUpAction(autoSuggestor,upAction);
        am.put("caret-up", cua);
        
        Action downAction = am.get("caret-down");
        CaretDownAction cda = new CaretDownAction(autoSuggestor,downAction);
        am.put("caret-down", cda);
        super.addNotify();
    }

    public void setFuzzySystem(FuzzySystem system) {
        this.system = system;
        autoSuggestor.setFuzzySystem(system);
        ruleBlockModel = new FuzzyRuleBlockListModel(system);
        lstRuleBlocks.setModel(ruleBlockModel);

        
        if ( system.getNrOfRuleBlocks() > 0 ){
            lstRuleBlocks.setSelectedIndex(0);
            selectRuleBlock(system.getFuzzyRuleBlock(0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlRules = new javax.swing.JPanel();
        scrRules = new javax.swing.JScrollPane();
        txtRuleList = new javax.swing.JTextPane();
        pnlRuleBlockList = new javax.swing.JPanel();
        scrRuleBlocks = new javax.swing.JScrollPane();
        lstRuleBlocks = new javax.swing.JList();
        btnAddRuleBlock = new javax.swing.JButton();
        btnDeleteRuleBlock = new javax.swing.JButton();
        lblFiller = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(800, 320));
        setLayout(new java.awt.GridBagLayout());

        pnlRules.setBorder(javax.swing.BorderFactory.createTitledBorder("Rules"));
        pnlRules.setLayout(new java.awt.BorderLayout(6, 6));

        txtRuleList.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        scrRules.setViewportView(txtRuleList);

        pnlRules.add(scrRules, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(pnlRules, gridBagConstraints);

        pnlRuleBlockList.setBorder(javax.swing.BorderFactory.createTitledBorder("Rule Blocks"));
        pnlRuleBlockList.setLayout(new java.awt.GridBagLayout());

        scrRuleBlocks.setMinimumSize(new java.awt.Dimension(150, 23));
        scrRuleBlocks.setPreferredSize(new java.awt.Dimension(150, 130));

        lstRuleBlocks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstRuleBlocks.setMaximumSize(null);
        lstRuleBlocks.setMinimumSize(new java.awt.Dimension(130, 80));
        lstRuleBlocks.setPreferredSize(null);
        lstRuleBlocks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstRuleBlocksValueChanged(evt);
            }
        });
        scrRuleBlocks.setViewportView(lstRuleBlocks);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        pnlRuleBlockList.add(scrRuleBlocks, gridBagConstraints);

        btnAddRuleBlock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/add.png"))); // NOI18N
        btnAddRuleBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRuleBlockActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 2, 4, 0);
        pnlRuleBlockList.add(btnAddRuleBlock, gridBagConstraints);

        btnDeleteRuleBlock.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/delete.png"))); // NOI18N
        btnDeleteRuleBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRuleBlockActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 4, 0);
        pnlRuleBlockList.add(btnDeleteRuleBlock, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        pnlRuleBlockList.add(lblFiller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 4);
        add(pnlRuleBlockList, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddRuleBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRuleBlockActionPerformed
        String name = "block";
        int index = 1;
        while (system.hasRuleBlock(name + index)) {
            ++index;
        }

        FuzzyRuleBlock rb = new FuzzyRuleBlock(system, "block" + index);
        int newindex = ruleBlockModel.addRuleBlock(rb);
        lstRuleBlocks.setSelectedIndex(newindex);
        
    }//GEN-LAST:event_btnAddRuleBlockActionPerformed

    private void btnDeleteRuleBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRuleBlockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteRuleBlockActionPerformed

    private void lstRuleBlocksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstRuleBlocksValueChanged
        selectRuleBlock((FuzzyRuleBlock) lstRuleBlocks.getSelectedValue());
    }//GEN-LAST:event_lstRuleBlocksValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRuleBlock;
    private javax.swing.JButton btnDeleteRuleBlock;
    private javax.swing.JLabel lblFiller;
    private javax.swing.JList lstRuleBlocks;
    private javax.swing.JPanel pnlRuleBlockList;
    private javax.swing.JPanel pnlRules;
    private javax.swing.JScrollPane scrRuleBlocks;
    private javax.swing.JScrollPane scrRules;
    private javax.swing.JTextPane txtRuleList;
    // End of variables declaration//GEN-END:variables

    public void insertUpdate(DocumentEvent e) {
        updateRules();
    }

    public void removeUpdate(DocumentEvent e) {
        updateRules();
    }

    public void changedUpdate(DocumentEvent e) {
        updateRules();
    }

    private void updateRules() {
        if (currentRuleBlock != null) {
            currentRuleBlock.clear();
            String[] text = txtRuleList.getText().split("[\\r\\n]+");
            for (String line : text) {
                FuzzyRule rule = new FuzzyRule(line);
                if (rule.isParsed()) {
                    currentRuleBlock.addFuzzyRule(rule);
                } 
            }
        }
    }

    private void selectRuleBlock(FuzzyRuleBlock ruleBlock) {
        if (ruleBlock == null)
            return;
        StringBuilder text = new StringBuilder();
        for (FuzzyRule rule : ruleBlock.getRules()) {
            text.append(rule.getRuleText());
            text.append("\n");
        }
        txtRuleList.getDocument().removeDocumentListener(this);
        txtRuleList.setText(text.toString());
        txtRuleList.repaint();
        txtRuleList.getDocument().addDocumentListener(this);
        currentRuleBlock = ruleBlock;
    }
}

class CaretUpAction implements Action{
    private AutoSuggestor suggestor;
    private Action originalAction;
    /**
     * 
     * @param suggestor 
     */
    public CaretUpAction(AutoSuggestor suggestor, Action originalAction)
    {
        this.suggestor = suggestor;
        this.originalAction = originalAction;
       
    }

    public void actionPerformed(ActionEvent e) {
        if ( suggestor.getSuggestionsPanel().isVisible())
        {
            suggestor.previousSuggestion();
        }else{
            originalAction.actionPerformed(e);
        }
    }

    public Object getValue(String key) {
        return originalAction.getValue(key);
    }

    public void putValue(String key, Object value) {
        originalAction.putValue(key,value);
    }

    public void setEnabled(boolean b) {
        originalAction.setEnabled(b);
    }

    public boolean isEnabled() {
        return originalAction.isEnabled();
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        originalAction.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        originalAction.removePropertyChangeListener(listener);
    }
}

class CaretDownAction implements Action{
    private AutoSuggestor suggestor;
    private Action originalAction;
    /**
     * 
     * @param suggestor 
     */
    public CaretDownAction(AutoSuggestor suggestor, Action originalAction)
    {
        this.suggestor = suggestor;
        this.originalAction = originalAction;
    }

    public void actionPerformed(ActionEvent e) {
        if ( suggestor.getSuggestionsPanel().isVisible())
        {
            suggestor.nextSuggestion();
        }else{
            originalAction.actionPerformed(e);
        }
    }

    public Object getValue(String key) {
        return originalAction.getValue(key);
    }

    public void putValue(String key, Object value) {
        originalAction.putValue(key,value);
    }

    public void setEnabled(boolean b) {
        originalAction.setEnabled(b);
    }

    public boolean isEnabled() {
        return originalAction.isEnabled();
    }

    public void addPropertyChangeListener(PropertyChangeListener listener) {
        originalAction.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        originalAction.removePropertyChangeListener(listener);
    }
}
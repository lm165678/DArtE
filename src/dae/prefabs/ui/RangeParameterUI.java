package dae.prefabs.ui;

import dae.prefabs.Prefab;
import dae.prefabs.ReflectionManager;
import dae.prefabs.parameters.Parameter;
import dae.prefabs.parameters.RangeParameter;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Koen Samyn
 */
public class RangeParameterUI extends javax.swing.JPanel implements ParameterUI, ChangeListener {

    private Parameter p;
    private Prefab currentPrefab;

    /**
     * Creates new form RangeParameterUI
     */
    public RangeParameterUI() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        spnValue = new javax.swing.JSpinner();

        setLayout(new java.awt.GridBagLayout());

        spnValue.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spnValue.setMinimumSize(null);
        spnValue.setPreferredSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(spnValue, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner spnValue;
    // End of variables declaration//GEN-END:variables

    public void setParameter(Parameter p) {
        this.p = p;
        RangeParameter rp = (RangeParameter) p;
        SpinnerNumberModel model1 = new SpinnerNumberModel(rp.getDefaultValue(), rp.getMin(), rp.getMax(), rp.getStep()); 
        
        spnValue.setModel(model1);
    }
    
    public Parameter getParameter(){
        return p;
    }
    
    public void setNode(Prefab currentSelectedNode) {
        spnValue.removeChangeListener(this);
        this.currentPrefab = currentSelectedNode;
        Object value = ReflectionManager.getInstance().invokeGetMethod(currentSelectedNode,p); 
        this.spnValue.setValue(value);
        spnValue.addChangeListener(this);
    }
    
    public void stateChanged(ChangeEvent e) {
        Double d = (Double)spnValue.getValue();        
        currentPrefab.setParameter(p, d.floatValue(), true);
    }
    
    /**
     * Checks if a label should be created for the UI.
     * @return true if a label should be created, false othwerise.
     */
    public boolean needsLabel(){
        return true;
    }
}

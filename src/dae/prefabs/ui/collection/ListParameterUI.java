package dae.prefabs.ui.collection;

import dae.GlobalObjects;
import dae.prefabs.Prefab;
import dae.prefabs.parameters.ListParameter;
import dae.prefabs.parameters.Parameter;
import dae.prefabs.ui.ParameterUI;
import java.awt.Frame;
import java.util.ArrayList;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListDataListener;

/**
 * This user interface enables to user to manage a list of items. The items in
 * the list are determined by the type attribute in the parameter definition. It
 * is possible to add, create, edit or remove items from the list.
 *
 * The editor for the item in the list will reuse the definitions in the
 * ObjectType.types file.
 *
 * @author Koen Samyn
 */
public class ListParameterUI extends javax.swing.JPanel implements ParameterUI, ChangeListener {

    private ListParameter listParameter;
    private Prefab selectedNode;

    /**
     * Creates new form ListParameterUI
     */
    public ListParameterUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrList = new javax.swing.JScrollPane();
        lstItems = new javax.swing.JList();
        btnCreate = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        scrList.setPreferredSize(new java.awt.Dimension(23, 23));

        lstItems.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        scrList.setViewportView(lstItems);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        add(scrList, gridBagConstraints);

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/flat/add.png"))); // NOI18N
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        add(btnCreate, gridBagConstraints);

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/flat/edit.png"))); // NOI18N
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
        add(btnEdit, gridBagConstraints);

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/icons/flat/remove.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
        add(btnRemove, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        listParameter.createListItem(selectedNode);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Object selected = lstItems.getSelectedValue();
        if ( selected != null && selected instanceof Prefab){
            Prefab p = (Prefab)selected;
            Frame rootFrame = (Frame)this.getTopLevelAncestor();
            GlobalObjects.getInstance().showParameterDialog(rootFrame, this, p);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JList lstItems;
    private javax.swing.JScrollPane scrList;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the currently selected node.
     *
     * @param currentSelectedNode the selected node.
     */
    public void setNode(Prefab currentSelectedNode) {
        this.selectedNode = currentSelectedNode;
        if (selectedNode != null) {
            lstItems.setModel(new ListParameterListModel(selectedNode, listParameter));
        }
    }

    /*
     * Sets the parameter for this ListParameterUI. This should be a ListParameter
     * object.
     * @param p the parameter for this ListParameterUI.
     */
    public void setParameter(Parameter p) {
        listParameter = (ListParameter) p;
        listParameter.addChangeListener(this);
    }

    /**
     * Gets the parameter from the ListParameterUI.
     *
     * @return the Parameter object.
     */
    public Parameter getParameter() {
        return listParameter;
    }

    /**
     * Should the label of this ListParameterUI be displayed.
     *
     * @return true if the label should be displayed, false otherwise.
     */
    public boolean needsLabel() {
        return true;
    }

    public void stateChanged(ChangeEvent e) {
        if (SwingUtilities.isEventDispatchThread()) {
            lstItems.setModel(new ListParameterListModel(selectedNode, listParameter));
        } else {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    lstItems.setModel(new ListParameterListModel(selectedNode, listParameter));
                }
            });
        }
    }
}

class ListParameterListModel implements ListModel {

    private Prefab prefab;
    private ListParameter parameter;
    private ArrayList<ListDataListener> listeners = new ArrayList<ListDataListener>();

    /**
     * Creates a new ListParameterListModel object.
     *
     * @param prefab the prefab that provides a list.
     * @param parameter the parameter that provides the reflection methods to
     * query the list.
     */
    public ListParameterListModel(Prefab prefab, ListParameter parameter) {
        this.prefab = prefab;
        this.parameter = parameter;
    }

    /**
     * Returns the size of the list.
     *
     * @return the size of the list.
     */
    public int getSize() {
        return parameter.getListSize(prefab);
    }

    /**
     * Gets the element at the given index.
     *
     * @param index the index of the element.
     * @return the element at the given index.
     */
    public Object getElementAt(int index) {
        return parameter.getListElementAt(prefab, index);
    }

    public void addListDataListener(ListDataListener l) {
        listeners.add(l);
    }

    public void removeListDataListener(ListDataListener l) {
        listeners.remove(l);
    }
}

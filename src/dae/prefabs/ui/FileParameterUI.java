/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package dae.prefabs.ui;

import dae.GlobalObjects;
import dae.prefabs.Prefab;
import dae.prefabs.ReflectionManager;
import dae.prefabs.parameters.FileParameter;
import dae.prefabs.parameters.Parameter;
import dae.prefabs.ui.classpath.FileNode;
import dae.project.Project;
import dae.project.ProjectTreeNode;
import java.awt.Container;
import java.awt.Frame;
import java.awt.Window;

/**
 *
 * @author Koen Samyn
 */
public class FileParameterUI extends javax.swing.JPanel implements ParameterUI{

    private FileParameter parameter;
    private Prefab currentNode;
    /** Creates new form FselectedNodeileParameterUI */
    public FileParameterUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        txtFileName = new javax.swing.JTextField();
        btnSelectFile = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        txtFileName.setColumns(10);
        txtFileName.setMaximumSize(new java.awt.Dimension(100, 20));
        txtFileName.setMinimumSize(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        add(txtFileName, gridBagConstraints);

        btnSelectFile.setText("...");
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        add(btnSelectFile, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        Container root = this.getTopLevelAncestor();
        
        
        Project currentProject = null;
        ProjectTreeNode p = currentNode;
        while (p.getProjectParent() != null) {
            if (p.getProjectParent() instanceof Project) {
                currentProject = (Project) p.getProjectParent();
                break;
            }
            p = p.getProjectParent();
        }
        if (currentProject != null) {
            // todo replace with query in application extension registry.
            FileNode fn = GlobalObjects.getInstance().selectAsset((Window)root, this, currentProject, "Select animation set", parameter.getExtension());
            if (fn != null) {
                currentNode.setParameter(parameter,fn.getFullName(),true);
                txtFileName.setText(fn.getFullName());
            }
        }
    }//GEN-LAST:event_btnSelectFileActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets the parameter that is bound to this ui.
     * @param p the parameter to bind.
     */
    public void setParameter(Parameter p) {
        if ( p instanceof FileParameter )
        this.parameter = (FileParameter)p;
    }
    
    public Parameter getParameter(){
        return parameter;
    }

    /**
     * Sets the prefab node that is bound to this ui.
     * @param currentSelectedNode 
     */
    public void setNode(Prefab currentSelectedNode) {
        this.currentNode = currentSelectedNode;
        
        Object pValue = ReflectionManager.getInstance().invokeGetMethod(currentSelectedNode,parameter); 
        if ( pValue instanceof String ){
            txtFileName.setText(pValue.toString());
        }else{
            txtFileName.setText("");
        }
    }
    
    /**
     * Checks if a label should be created for the UI.
     * @return true if a label should be created, false othwerise.
     */
    public boolean needsLabel(){
        return true;
    }

}

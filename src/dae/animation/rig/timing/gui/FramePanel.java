/*
 * Digital Arts and Entertainment 
 */
package dae.animation.rig.timing.gui;

import dae.animation.rig.timing.Behaviour;
import dae.animation.rig.timing.TimeLine;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;

/**
 *
 * @author Koen.Samyn
 */
public class FramePanel extends javax.swing.JPanel {

    private Behaviour model;
    private float scale;
    private int marginBottom = 10;
    private int marginTop = 20;

    private Stroke thickStroke = new BasicStroke(2.0f);
    private Stroke thinStroke = new BasicStroke(1.0f);

    private final BasicStroke thinDashStroke
            = new BasicStroke(1.0f,
                    BasicStroke.CAP_BUTT,
                    BasicStroke.JOIN_MITER,
                    10.0f, new float[]{10.0f}, 0.0f);
    /**
     * The minimum frames to show.
     */
    private int minVisibleFrames = 20;

    /**
     * Creates new form FramePanel
     */
    public FramePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setBehaviour(Behaviour model) {
        this.model = model;
        repaint();
    }

    /**
     * Paints the timeline.
     *
     * @param g the timeline to paint.
     */
    @Override
    protected void paintComponent(Graphics g) {
        if (model == null) {
            return;
        }
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        int width = this.getWidth();
        int height = this.getHeight();

        int maxFrameNumber = Math.max(this.minVisibleFrames, model.getMaxFrameNumber());
        float cellWidth = width * 1.0f / maxFrameNumber;

        int numTimeLines = model.getNumberOfTimeLines();
        float cellHeight = height * 1.0f / numTimeLines;

        for (int frame = 0; frame < maxFrameNumber; frame++) {
            int currentTimeLine = 0;
            int x = (int) (frame * cellWidth);
            if (frame % 5 == 0) {
                g2d.setStroke(thickStroke);
                g2d.drawString(Integer.toString(frame), x, 10);
            } else {
                g2d.setStroke(thinStroke);
            }

            g2d.drawLine(x, marginTop, x, height - marginBottom);
            for (TimeLine tl : model.getTimeLines()) {

                if (tl.containsKey(frame)) {
                    int y = currentTimeLine * (int) cellHeight;
                    g2d.setPaint(Color.ORANGE);
                    g2d.fillRect(x, y, (int) cellWidth, (int) cellHeight);

                    g2d.setPaint(Color.BLACK);
                    g2d.drawRect(x, y, (int) cellWidth, (int) cellHeight);

                }
                currentTimeLine++;
            }
        }

        // currentFrame
        int x = (int) (model.getCurrentFrame() * cellWidth);
        g2d.setStroke(thickStroke);

        g2d.setPaint(Color.ORANGE);
        g2d.fillRect(x, 0, (int) cellWidth, (int) height);

        g2d.setPaint(Color.BLACK);
        g2d.drawRect(x, 0, (int) cellWidth, (int) height);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

/*
 * Digital Arts and Entertainment 

* TODO : Keys verschuiven
* TODO : interpolatie manipuleren --> linear 
* TODO : filmpkes maken
* TODO : automatic keymaker
* TODO : multiple selections en verschuiven.
* TODO : shift verschuiven : kopieren.
* TODO : facials controls --> nog niet echt nodig voor robot.
* TODO : blink + look to upper-right and come back.
* TODO : timeline scaling --> 
 */
package dae.animation.rig.timing.gui;

import com.google.common.eventbus.Subscribe;
import dae.GlobalObjects;
import dae.animation.rig.Rig;
import dae.animation.rig.timing.Behaviour;
import dae.prefabs.Prefab;
import dae.prefabs.types.ObjectTypePanel;
import dae.prefabs.ui.events.AnimationEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.SwingUtilities;

/**
 *
 * @author Koen.Samyn
 */
public class TimingPanel extends javax.swing.JPanel implements ObjectTypePanel, ItemListener{

    /**
     * Creates new form TimingPanel
     */
    public TimingPanel() {
        initComponents();
        behaviourSelectorPanel2.addBehaviourListener(this);
        GlobalObjects.getInstance().registerListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        behaviourSelectorPanel2 = new dae.animation.rig.timing.gui.BehaviourSelectorPanel();
        framePanel1 = new dae.animation.rig.timing.gui.FramePanel();

        framePanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 51)));

        javax.swing.GroupLayout framePanel1Layout = new javax.swing.GroupLayout(framePanel1);
        framePanel1.setLayout(framePanel1Layout);
        framePanel1Layout.setHorizontalGroup(
            framePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 538, Short.MAX_VALUE)
        );
        framePanel1Layout.setVerticalGroup(
            framePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(behaviourSelectorPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(framePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(behaviourSelectorPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(framePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private dae.animation.rig.timing.gui.BehaviourSelectorPanel behaviourSelectorPanel2;
    private dae.animation.rig.timing.gui.FramePanel framePanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setPrefab(Prefab prefab) {
        this.behaviourSelectorPanel2.setPrefab(prefab);
        if ( prefab instanceof Rig ){
            Rig r = (Rig)prefab;
            Behaviour current = r.getCurrentBehaviour();
            if ( current == null ){
                r.selectFirstBehaviour();
            }
            this.framePanel1.setBehaviour(r.getCurrentBehaviour());
        }
    }

    @Override
    public void cleanUp() {
        
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if ( e.getStateChange() == ItemEvent.SELECTED )
        {
            framePanel1.setBehaviour((Behaviour)e.getItem());
        }
    }
    
    @Subscribe
    public void animationChanged(AnimationEvent ae){
        SwingUtilities.invokeLater(() -> {
            framePanel1.repaint();
        });
    }
}

package dae.animation.rig.gui;

import dae.animation.rig.OutputConnector;
import dae.animation.rig.RevoluteJointOutputConnector;
import dae.animation.rig.Rig;

/**
 *
 * @author Koen Samyn
 */
public class FreeJointOutputConnectorPanel extends javax.swing.JPanel implements OutputCustomizer {

    private Rig rig;
    private RevoluteJointOutputConnector connector;

    /**
     * Creates new form RevoluteJointOutputConnectorPanel
     */
    public FreeJointOutputConnectorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblFactor = new javax.swing.JLabel();
        spnFactor = new javax.swing.JSpinner();
        lblFiller = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        lblFactor.setText("Factor : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 2, 0);
        add(lblFactor, gridBagConstraints);

        spnFactor.setModel(new javax.swing.SpinnerNumberModel(1.0f, 0.0f, null, 0.1f));
        spnFactor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnFactorStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 6, 10);
        add(spnFactor, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 1.0;
        add(lblFiller, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void spnFactorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnFactorStateChanged
        if (connector != null) {
            connector.setFactor((Float)spnFactor.getValue());
        }
    }//GEN-LAST:event_spnFactorStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblFactor;
    private javax.swing.JLabel lblFiller;
    private javax.swing.JSpinner spnFactor;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setRig(Rig rig) {
    }

    @Override
    public OutputConnector createConnector() {
        RevoluteJointOutputConnector rjc =
                new RevoluteJointOutputConnector();
        rjc.setFactor((Float) spnFactor.getValue());
        return rjc;
    }

    @Override
    public void setOutputConnector(OutputConnector oc) {
        if (oc instanceof RevoluteJointOutputConnector) {
            this.connector = (RevoluteJointOutputConnector) oc;
            spnFactor.setValue(connector.getFactor());
        }
    }
}
